#!/bin/sh

# t2 - PLACEMENT DAY
#
# A simple tiling script for X11

# Preliminaries ########################################################

T2_CONFIG_DIR="${HOME}/.config/t2"
T2_TMP_DIR="${TMP_DIR:-/tmp/${USER}/t2}"
T2_DEFAULT_CONFIG_FILE="${T2_TMP_DIR}/layouts/default"
T2_CURRENT_CONFIG_FILE="${T2_TMP_DIR}/layouts/${DESKTOP_SESSION}"
T2_DEBUG_MODE="no"

# These windows don't position themselves correctly even with utilities
# like xdotool, because they don't calculate in their own window frame.
FRAME_UNAWARE_WINDOWS=("mpv")

# These windows shouldn't ever be moved (e.g., panels and root windows)
BLACKLISTED_WINDOWS=("x-caja-desktop" "Desktop" "Labortablo" "xfce4-panel")

usage() {
  cat <<-EOF
	Usage:
	  ${0##*/} [-c T2_CONFIG_FILE_SUFFIX] LAYOUT

	Options:

	-c T2_CONFIG_FILE_SUFFIX
	  Use an alternate config file to place the active window
	  Passing "-c foo" sources \${HOME}/.config/t2/layouts/foo

	LAYOUT
	  A 4-char argument formatted [TILES][X_0][X_1][Y_SPAN]
          The first three characters are positive hexadecimal integers

	  TILES
	    [0-f] slice screen into TILES vertical sections

	  X_0
	    [0-f] Window's left edge is left boundary of tile X_0
            Must be less than or equal to TILES

	  X_1
	    [0-f] Window's right edge is right boundary of tile X_1
            Must be greater than or equal to X_0

	  Y_SPAN
	    [fhl] Place across full, upper half, or lower half of
	    the tile-able space
EOF
}

init() {
  cp -nr ${T2_CONFIG_DIR} ${T2_TMP_DIR}
}

get_wm_classes() {
  xprop -id "${1}" WM_CLASS | sed '/not found./d;s|^.* \= \(.*\)$|\1|' | tr -d '",'
}

get_net_frame_extents() {
  local _f=$(xprop -id "${1}" _NET_FRAME_EXTENTS | sed '/not found./d;s|^.* \= \(.*\)$|\1|' | tr -d ',')
  echo ${_f:-"0 0 0 0"}
}

get_gtk_frame_extents() {
  local _f=$(xprop -id "${1}" _GTK_FRAME_EXTENTS | sed '/not found./d;s|^.* \= \(.*\)$|\1|' | tr -d ',')
  echo ${_f:-"0 0 0 0"}
}

# Options parsing ######################################################

while getopts :ic:dmw:h o; do
  case "${o}" in
    i)
      init
      ;;
    c)
      T2_CURRENT_CONFIG_FILE="${T2_TMP_DIR}/layouts/${OPTARG}"
      ;;
    d)
      T2_DEBUG_MODE="yes"
      ;;
    m)
      WINDOW_CLASSES=( "mpv" )
      ;;
    w)
      CURRENT_WINDOW_ID="${OPTARG}"
      ;;
    h)
      usage
      exit 0
      ;;
  esac
done

shift $((OPTIND - 1))

# Config parsing #######################################################

if [[ ! -e ${T2_TMP_DIR} ]]; then
  init
fi

. $T2_DEFAULT_CONFIG_FILE 2>/dev/null
. $T2_CURRENT_CONFIG_FILE 2>/dev/null

ACTIVE_WINDOW_ID=$(xdotool getactivewindow)
WINDOW_ID=${CURRENT_WINDOW_ID:-${ACTIVE_WINDOW_ID}}
WINDOW_NAME=$(xdotool getwindowname $WINDOW_ID)

if [[ "${BLACKLISTED_WINDOWS[@]}" =~ "${WINDOW_NAME}" ]]
then
  cat <<-ERR_MSG
	Sorry, this window is blacklisted from tiling. Most likely this
	means your active window is actually a root or desktop window.
	Please select an application window or dialog before attempting
	to tile.
	ERR_MSG
  exit 2
fi

# Get X11 frame dimensions to subtract them from the geometry calculations
# and add them from the positioning calculations
x11_frame_dims=( $(get_net_frame_extents "${WINDOW_ID}") )

x11_frame_l=${x11_frame_dims[0]}
x11_frame_r=${x11_frame_dims[1]}
x11_frame_t=${x11_frame_dims[2]}
x11_frame_b=${x11_frame_dims[3]}

x11_frame_width=$(( $x11_frame_l + $x11_frame_r ))
x11_frame_height=$(( $x11_frame_t + $x11_frame_b ))

# Get GTK frame dimensions to add them to the geometry calculations
# and subtract them from the positioning calculations
gtk_frame_dims=( $(get_gtk_frame_extents "${WINDOW_ID}") )

gtk_frame_l=${gtk_frame_dims[0]}
gtk_frame_r=${gtk_frame_dims[1]}
gtk_frame_t=${gtk_frame_dims[2]}
gtk_frame_b=${gtk_frame_dims[3]}

gtk_frame_width=$(( $gtk_frame_l + $gtk_frame_r ))
gtk_frame_height=$(( $gtk_frame_t + $gtk_frame_b ))


WINDOW_CLASSES+=( $(get_wm_classes $WINDOW_ID) )
if [[ ${#WINDOW_CLASSES[@]} -ne 0 ]]; then
  for wm_class in ${WINDOW_CLASSES[@]}; do
    if [[ "${FRAME_UNAWARE_WINDOWS[@]}" =~ "${wm_class}" ]]; then
      _left_edge_adj=$(( $gtk_frame_l - $x11_frame_l ))
      _upper_edge_adj=$(( $gtk_frame_t - $x11_frame_t ))
      break
    fi
  done
fi

left_edge_adj=${_left_edge_adj:-${gtk_frame_l}}
upper_edge_adj=${_upper_edge_adj:-${gtk_frame_t}}

# Tiling preferences ###################################################

h_slices=${default_slices:-2}

case "${#1}" in
  4)
    h_slices=$(printf "%d" "0x${1:0:1}")
    x0=$(( $(printf "%d" "0x${1:1:1}") - 1 ))
    x1=$(( $(printf "%d" "0x${1:2:1}") - 1 ))
    v_slices=${1:3:1}
    ;;
  3)
    x0=$(( $(printf "%d" "0x${1:0:1}") - 1 ))
    x1=$(( $(printf "%d" "0x${1:1:1}") - 1 ))
    v_slices=${1:2:1}
    ;;
  *)
    usage
    exit 3
    ;;
esac

# [fhl] Vertical placement
# h=higher half-plane
# l=lower half-plane
# f=full tile-able region
case "${v_slices}" in
  h)
    y0=0
    y1=0
    ;;
  l)
    y0=1
    y1=1
    ;;
  f)
    y0=0
    y1=1
    ;;
esac

if [ ! -z "$2" ]
then
  tile_gap="$2"
fi

# Window Placement #####################################################

# Screen dimensions
screen_width=$(( $mon_width - $left_panel_width - $right_panel_width - \
$left_margin - $right_margin ))

screen_height=$(( $mon_height - $top_panel_height - $bottom_panel_height - \
$top_margin - $bottom_margin ))

# Basic (/single-)tile width
tile_width=$(( $(( $screen_width / $h_slices )) - $(( $(( $h_slices - 1 )) * \
$tile_gap )) / $h_slices ))

# Relative placement of left edge
left_edge=$(( $x0 * $(( $tile_width + $tile_gap )) - $left_edge_adj ))
window_width_pre=$(( $(( $x1 - $x0 )) * $(( $tile_width + $tile_gap )) + $tile_width ))
window_width=$(( $window_width_pre - $x11_frame_width + $gtk_frame_width ))

# Basic (/single-)tile height
tile_height=$(( $(( $screen_height / 2 )) - $tile_gap / 2 ))

# Relative placement of upper edge
upper_edge=$(( $y0 * $(( $tile_height + $tile_gap )) - $upper_edge_adj ))
window_height_pre=$(( $(( $y1 - $y0 )) * $(( $tile_height + $tile_gap )) + $tile_height ))
window_height=$(( $window_height_pre - $x11_frame_height + $gtk_frame_height  ))

# Modulate edges according to config.
horizontal_placement=$(( $left_edge + $left_panel_width + $left_margin + $horizontal_offset ))
vertical_placement=$(( $upper_edge + $top_panel_height + $top_margin + $vertical_offset ))

# Execution ############################################################

if [[ "$T2_DEBUG_MODE" = "yes" ]]
then
  echo "$window_width $window_height $horizontal_placement $vertical_placement"
  exit 0
fi

xdotool \
  windowsize ${WINDOW_ID} $window_width $window_height\
  windowmove ${WINDOW_ID} $horizontal_placement $vertical_placement

unset window_width window_height horizontal_placement vertical_placement

exit 0
