#!/bin/bash

# t2 - PLACEMENT DAY
#
# A simple tiling script for X11

# Preliminaries ########################################################

T2_CONFIG_DIR="$HOME/.config/t2"
T2_LIB_DIR="$HOME/.local/lib/t2"

T2_TMP_DIR="${T2_TMP_DIR:-${XDG_RUNTIME_DIR}/t2}"
T2_DEFAULT_CONFIG_FILE="$T2_TMP_DIR/layouts/default"
T2_CONFIG_FILE_NAMESPACE="$T2_TMP_DIR/layouts/${XDG_CURRENT_DESKTOP,,}"
T2_DEBUG_MODE="no"

# These windows don't position themselves correctly even with utilities
# like xdotool, because they don't calculate in their own window frame.
FRAME_UNAWARE_WINDOWS=("mpv" "libreoffice" "teams-for-linux" "famitracker.exe" "sekaiju.exe")

# These windows shouldn't ever be moved (e.g., panels and root windows)
BLACKLISTED_NET_WM_TYPES=("_NET_WM_WINDOW_TYPE_DESKTOP" "_NET_WM_WINDOW_TYPE_DOCK")

usage() {
  cat <<-EOF
	Usage:
	  ${0##*/} [[-c T2_CONFIG_FILE_NAMESPACE] [-d] [-m] [-s MONITOR]
     [-w WINDOW_ID] LAYOUT] [-r] [-h]

	Options:

	-c T2_CONFIG_FILE_NAMESPACE
	  Use an alternate config to place the active window
	  Passing "-c foo" will hint the script to source config files under
    \${HOME}/.config/t2/layouts/foo

  -d
    Debug mode; instead of placing a window, the calculated window
    geometry will be printed in the standard X11 geometry specification
    format

  -m
    Hints to the script that the window is frame-unaware on construction;
    the calculated geometry will not account for X11 or GTK frame extents
    Examples of frame-unaware applications include mpv

  -s MONITOR
    Send the window to be moved to the specified monitor, rather than
    tiling it on its current monitor

  -w WINDOW_ID
    Tile the specified window rather than the currently focused window

  -r
    Reset the config; this is useful after making hand edits to your
    screen config

  -h
    Print this help message

	LAYOUT
	  A 4-char argument formatted [TILES][X_0][X_1][Y_SPAN]
          The first three characters are positive hexadecimal integers

	  TILES
	    [0-f] slice screen into TILES vertical sections

	  X_0
	    [0-f] Window's left edge is left boundary of tile X_0
            Must be less than or equal to TILES

	  X_1
	    [0-f] Window's right edge is right boundary of tile X_1
            Must be greater than or equal to X_0

	  Y_SPAN
	    [fhl] Place across full, upper half, or lower half of
	    the tile-able space
EOF
}

purge_script_config() {
  rm -rf "${T2_TMP_DIR:?}"/*
}

generate_script_config() {
  mkdir -p "$T2_TMP_DIR"
  t2-script-config-gen.sh -l
}

generate_user_configs() {
  mkdir -p "$T2_TMP_DIR"
  t2-user-config-gen.sh -l
}

try_source() {
  local _file="$1"

  [[ -f $_file ]] && . "$_file"
}

get_wm_classes() {
  local -ir _wid=$1

  xprop -id $_wid WM_CLASS | sed '/not found./d;s|^.* \= \(.*\)$|\1|' | tr -d '",'
}

get_net_wm_window_type() {
  local -ir _wid=$1

  xprop -id $_wid _NET_WM_WINDOW_TYPE | sed '/not found./d;s|^.* \= \(.*\)$|\1|' | tr -d '",'
}

get_net_frame_extents() {
  local -ir _wid=${1}

  local _f=$(xprop -id $_wid _NET_FRAME_EXTENTS | sed '/not found./d;s|^.* \= \(.*\)$|\1|' | tr -d ',')
  echo ${_f:-"0 0 0 0"}
}

get_gtk_frame_extents() {
  local -ir _wid=${1}
  local -i l r t b

  read -r l r t b <<<"$(xprop -id $_wid _GTK_FRAME_EXTENTS | sed '/not found./d;s|^.* \= \(.*\)$|\1|' | tr -d ',')"
  echo ${l:-0} ${r:-0} ${t:-0} ${b:-0}
}

# Options parsing ######################################################

while getopts :ic:dms:w:rh o; do
  case "$o" in
  c)
    T2_CONFIG_FILE_NAMESPACE="$T2_TMP_DIR/layouts/$OPTARG"
    ;;
  d)
    T2_DEBUG_MODE="yes"
    ;;
  m)
    WINDOW_CLASSES=("mpv")
    ;;
  s)
    T2_MONITOR="$OPTARG"
    ;;
  w)
    CURRENT_WINDOW_ID="$OPTARG"
    ;;
  r)
    echo "Resetting cached config..."
    purge_script_config
    generate_script_config
    #generate_user_configs
    exit 0
    ;;
  h)
    usage
    exit 0
    ;;
  *)
    echo "Error: Unknown option $o"
    echo
    usage
    exit
    ;;
  esac
done

shift $((OPTIND - 1))

# Config parsing #######################################################

[[ -e $T2_TMP_DIR ]] || generate_script_config

declare -i WINDOW_ID=${CURRENT_WINDOW_ID:-$(xdotool getactivewindow)}
WINDOW_TYPE=$(get_net_wm_window_type $WINDOW_ID)
T2_MONITOR=${T2_MONITOR:-$(mon-name $WINDOW_ID)}

. "$T2_TMP_DIR/$T2_MONITOR"

if [[ " ${BLACKLISTED_NET_WM_TYPES[*]} " =~ " $WINDOW_TYPE " ]]; then
  cat <<-ERR_MSG
	Sorry, this window is blacklisted from tiling. Most likely this
	means your active window is actually a root or desktop window.
	Please select an application window or dialog before attempting
	to tile.
	ERR_MSG
  exit 2
fi

# Get X11 frame dimensions to subtract them from the geometry calculations
# and add them from the positioning calculations
declare -i x11_frame_l x11_frame_t x11_frame_t x11_frame_b
read -r x11_frame_l x11_frame_r x11_frame_t x11_frame_b <<<"$(get_net_frame_extents "$WINDOW_ID")"

x11_frame_width=$((x11_frame_l + x11_frame_r))
x11_frame_height=$((x11_frame_t + x11_frame_b))

# Get GTK frame dimensions to add them to the geometry calculations
# and subtract them from the positioning calculations
declare -i gtk_frame_l x11_frame_t x11_frame_t x11_frame_b
read -r gtk_frame_l gtk_frame_r gtk_frame_t gtk_frame_b <<<"$(get_gtk_frame_extents "$WINDOW_ID")"

gtk_frame_width=$((gtk_frame_l + gtk_frame_r))
gtk_frame_height=$((gtk_frame_t + gtk_frame_b))

width_adj=$((x11_frame_width - gtk_frame_width))
height_adj=$((x11_frame_height - gtk_frame_height))

readarray WINDOW_CLASSES <<<"$(get_wm_classes $WINDOW_ID)"
if [[ ${#WINDOW_CLASSES[@]} -ne 0 ]]; then
  for wm_class in "${WINDOW_CLASSES[@]}"; do
    if [[ " ${FRAME_UNAWARE_WINDOWS[*]} " =~ " $wm_class " ]]; then
      left_edge_adj=$((x11_frame_l - gtk_frame_l))
      upper_edge_adj=$((x11_frame_t - gtk_frame_t))
      break
    fi
  done
fi

left_edge_adj=${left_edge_adj:-${gtk_frame_l}}
upper_edge_adj=${upper_edge_adj:-${gtk_frame_t}}

# Tiling preferences ###################################################

h_slices=${default_slices:-2}

case "${#1}" in
4)
  h_slices=$(printf "%d" "0x${1:0:1}")
  x0=$(printf "%d" "0x${1:1:1}")
  x1=$(printf "%d" "0x${1:2:1}")
  v_slices=2
  v_hemi=${1:3:1}
  ;;
6)
  h_slices=$(printf "%d" "0x${1:0:1}")
  x0=$(printf "%d" "0x${1:1:1}")
  x1=$(printf "%d" "0x${1:2:1}")
  v_slices=$(printf "%d" "0x${1:3:1}")
  y0=$(printf "%d" "0x${1:4:1}")
  y1=$(printf "%d" "0x${1:5:1}")
  ;;
3)
  x0=$(printf "%d" "0x${1:0:1}")
  x1=$(printf "%d" "0x${1:1:1}")
  v_slices=2
  v_hemi=${1:3:1}
  ;;
*)
  usage
  exit 3
  ;;
esac

# [fhl] Vertical placement
# h=higher half-plane
# l=lower half-plane
# f=full tile-able region
case "${v_hemi}" in
h)
  y0=1
  y1=1
  ;;
l)
  y0=2
  y1=2
  ;;
f)
  y0=1
  y1=2
  ;;
esac

# Window Placement #####################################################

calc() {
  echo "$@" | bc
}

get_window_placement() {
  local -ir x0=$1
  local -ir x1=$2
  local -ir y0=$3
  local -ir y1=$4
  local -ir h_slices=$5
  local -ir v_slices=$6

  local screen_width screen_height \
    tile_width tile_height \
    left_edge upper_edge \
    window_width window_height

  local left_padding right_padding \
    top_padding bottom_padding

  local window_width window_height \
    horizontal_placement vertical_placement

  left_padding=$((left_panel_width + left_margin))
  right_padding=$((right_panel_width + right_margin))
  top_padding=$((top_panel_height + top_margin))
  bottom_padding=$((bottom_panel_height + bottom_margin))

  # Screen dimensions
  screen_width=$((mon_width - left_padding - right_padding))
  screen_height=$((mon_height - top_padding - bottom_padding))

  # Horizontal geometry ########################################################

  # Basic (/single-)tile width
  tile_width=$((screen_width / h_slices))

  # Relative placement of left edge
  left_edge=$(($((x0 - 1)) * tile_width))
  left_edge=$((left_edge + left_padding))
  left_edge=$((left_edge + left_edge_adj))

  window_width=$(($((x1 - x0 + 1)) * tile_width))
  window_width=$((window_width - width_adj))

  if [[ $x0 -ne 1 ]]; then
    left_edge=$((left_edge + $((tile_gap / 2))))
    window_width=$((window_width - $((tile_gap / 2))))
  fi

  if [[ $x1 -ne $h_slices ]]; then
    window_width=$((window_width - $((tile_gap / 2))))
  fi

  # Vertical geometry ##########################################################

  # Basic (/single-)tile height
  tile_height=$((screen_height / v_slices))

  # Relative placement of upper edge
  upper_edge=$(($((y0 - 1)) * tile_height))
  upper_edge=$((upper_edge + top_padding))
  upper_edge=$((upper_edge + upper_edge_adj))

  window_height=$(($((y1 - y0 + 1)) * tile_height))
  window_height=$((window_height - height_adj))

  if [[ $y0 -ne 1 ]]; then
    upper_edge=$((upper_edge + $((tile_gap / 2))))
    window_height=$((window_height - $((tile_gap / 2))))
  fi

  if [[ $y1 -ne $v_slices ]]; then
    window_height=$((window_height - $((tile_gap / 2))))
  fi

  echo $window_width $window_height $left_edge $upper_edge
}

# Execution ############################################################

read window_width window_height horizontal_placement vertical_placement <<<"$(get_window_placement $x0 $x1 $y0 $y1 $h_slices $v_slices)"

if [[ "$T2_DEBUG_MODE" = "yes" ]]; then
  echo "${window_width}x${window_height}+${horizontal_placement}+${vertical_placement}"
  exit 0
fi

xdotool \
  windowsize $WINDOW_ID $window_width $window_height \
  windowmove $WINDOW_ID $horizontal_placement $vertical_placement

unset window_width window_height horizontal_placement vertical_placement

exit 0
