#!/bin/sh

# t2 - PLACEMENT DAY
#
# Usage: t2 PLACEMENT [tile_gap]

# Preliminaries ###############################################################

T2_CONFIG_DIR="${HOME}/.config/t2"

usage () {
  cat <<-EOF
	Usage:
	  ${0##*/} [-c T2_CONFIG_FILE_SUFFIX] LAYOUT

	Options:

	-c T2_CONFIG_FILE_SUFFIX
	  Use an alternate config file to place the active window
	  "-c 2" sources \${HOME}/.config/t2/layout-2

	LAYOUT
	  A 4-char argument formatted [TILES][X_0][X_1][Y_SPAN]

	  TILES
	    [0-9] slice screen into TILES vertical sections

	  X_0
	    [0-9] Window's left edge is left boundary of tile X_0

	  X_1
	    [0-9] Window's right edge is right boundary of tile X_1

	  Y_SPAN
	    [fhl] Place across full, upper half, or lower half of
	    the tile space
EOF
}

ACTIVE_WINDOW=$(xdotool getactivewindow getwindowname)

# Fallback to make sure we don't accidentally tile the desktop window.
# Supports MATE and Xfce so far.
if [[ "$ACTIVE_WINDOW" = "x-caja-desktop" || "$ACTIVE_WINDOW" = "Desktop" ]]
then
  echo "Yeah, not movin' that one."
  exit 2
fi

# Config - Change these to match your own environment #########################

while getopts :c:h o; do
  case "${o}" in
    c)
      if [[ ! -e "${T2_CONFIG_DIR}/layout-${OPTARG}" ]]; then
	echo "Unable to locate ${T2_CONFIG_DIR}/layout-${OPTARG}."
        exit 3
      fi
      T2_CONFIG_FILE="${T2_CONFIG_DIR}/layout-${OPTARG}"
      . $T2_CONFIG_FILE
      shift 2
      ;;
    h)
      usage
      exit 0
      ;;
  esac
done

if [[ -z "${T2_CONFIG_FILE+x}" ]]; then
  T2_CONFIG_FILE="${T2_CONFIG_DIR}/layout"
  . $T2_CONFIG_FILE
fi

# You guessed it.
screen_width=$(( $mon_width - $left_margin - $right_margin ))

screen_height=$(( $mon_height - $top_panel_height - $bottom_panel_height - \
$top_margin - $bottom_margin ))

# Tiling preferences ##########################################################

# [1-9] Number of horizontal tile slices
slices=${1:0:1}

# [1-9] First horizontal slice to occupy
x0=$(( ${1:1:1} - 1 ))

# [1-9] Last horizontal slice to occupy
# (Note that the script will fail out if $x0 > $x1.
# $x0 = $x1 is acceptable and gives a single-slice-width
# window.
x1=$(( ${1:2:1} - 1 ))

# [fhl] Vertical placement
# h=higher half-screen
# l=lower half-screen
# f=fullscreen
# Note that fullscreen-tiled is _not_ the same thing
# as fullscreening a window according to your tile
# manager.
case "${1:3:1}" in
  h)
    y0=0
    y1=0
    ;;
  l)
    y0=1
    y1=1
    ;;
  f)
    y0=0
    y1=1
    ;;
esac

if [ ! -z "$2" ]
then
  tile_gap="$2"
fi

# Window Placement ############################################################

# Basic (/single-)tile width.
tile_width=$(( $(( $screen_width / $slices )) - $(( $(( $slices - 1 )) * \
$tile_gap )) / $slices ))

# Horizontal placement of the left edge.
left_edge=$(( $x0 * $(( $tile_width + $tile_gap )) ))
window_width=$(( $(( $x1 - $x0 )) * $(( $tile_width + $tile_gap )) + $tile_width ))

# Basic (/single-)tile height.
tile_height=$(( $(( $screen_height / 2 )) - $tile_gap / 2 ))

#Vertical placement of the upper edge.
upper_edge=$(( $y0 * $(( $tile_height + $tile_gap )) ))
window_height=$(( $(( $y1 - $y0 )) * $(( $tile_height + $tile_gap )) + $tile_height ))

#echo $width $height $c $d

if [[ "$ACTIVE_WINDOW" =~ ^.*\ \-\ mpv$ ]]
then
 left_edge=$(( $c + 2 ))
 upper_edge=$(( $d + 10 ))
fi

xdotool getactivewindow windowsize $window_width $window_height windowmove \
$(( $left_edge + $left_panel + $left_margin + $horizontal_offset )) \
$(( $upper_edge + $top_panel + $top_margin + $vertical_offset ))

unset width height c d

exit 0
